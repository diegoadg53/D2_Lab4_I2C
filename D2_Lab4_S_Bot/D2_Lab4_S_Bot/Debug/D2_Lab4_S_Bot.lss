
D2_Lab4_S_Bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001ec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f5  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000701  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000398  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b8  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e7  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Slave_Init>:
 */ 

#include "I2C_S.h"

void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //Pines de I2C como entradas
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	9f 7c       	andi	r25, 0xCF	; 207
  aa:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1; // Se asigna la dirección que tendrá
  ac:	88 0f       	add	r24, r24
  ae:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE); //Se habilita la interfaz, ACK automático, se Habilita la ISR
  b2:	85 e4       	ldi	r24, 0x45	; 69
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	08 95       	ret

000000ba <setup>:
		PORTD = (PORTD & 0x0F) | ((contador<<4)&0xF0);
    }
}

void setup(void){
	cli();
  ba:	f8 94       	cli
	DDRD |= 0xF0;
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	80 6f       	ori	r24, 0xF0	; 240
  c0:	8a b9       	out	0x0a, r24	; 10
	PCMSK1 |= 0x03;
  c2:	ec e6       	ldi	r30, 0x6C	; 108
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);
  cc:	e8 e6       	ldi	r30, 0x68	; 104
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24
	DDRC = 0;
  d6:	17 b8       	out	0x07, r1	; 7
	I2C_Slave_Init(slave2);
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Slave_Init>
	sei();
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <main>:
void setup(void);

int main(void)
{
    /* Replace with your application code */
	setup();
  e2:	0e 94 5d 00 	call	0xba	; 0xba <setup>
    while (1) 
    {
		PORTD = (PORTD & 0x0F) | ((contador<<4)&0xF0);
  e6:	2b b1       	in	r18, 0x0b	; 11
  e8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	30 e1       	ldi	r19, 0x10	; 16
  ee:	93 9f       	mul	r25, r19
  f0:	c0 01       	movw	r24, r0
  f2:	11 24       	eor	r1, r1
  f4:	92 2f       	mov	r25, r18
  f6:	9f 70       	andi	r25, 0x0F	; 15
  f8:	89 2b       	or	r24, r25
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	f4 cf       	rjmp	.-24     	; 0xe6 <main+0x4>

000000fe <__vector_4>:
	DDRC = 0;
	I2C_Slave_Init(slave2);
	sei();
}

ISR(PCINT1_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
	if (!(PINC & (1 << PINC0))) // Decrementa
 10a:	30 99       	sbic	0x06, 0	; 6
 10c:	11 c0       	rjmp	.+34     	; 0x130 <__vector_4+0x32>
	{
		if (J2_Apachado == 0)
 10e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <J2_Apachado>
 112:	81 11       	cpse	r24, r1
 114:	09 c0       	rjmp	.+18     	; 0x128 <__vector_4+0x2a>
		{
			if (contador > 0)
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	88 23       	and	r24, r24
 11c:	29 f0       	breq	.+10     	; 0x128 <__vector_4+0x2a>
			{
				contador -= 1;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	81 50       	subi	r24, 0x01	; 1
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		J2_Apachado = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <J2_Apachado>
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__vector_4+0x36>
	}
	else {
		J2_Apachado = 0;
 130:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <J2_Apachado>
	}
	if (!(PINC & (1 << PINC1))) // Incrementa
 134:	31 99       	sbic	0x06, 1	; 6
 136:	11 c0       	rjmp	.+34     	; 0x15a <__vector_4+0x5c>
	{
		if (J1_Apachado == 0)
 138:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <J1_Apachado>
 13c:	81 11       	cpse	r24, r1
 13e:	09 c0       	rjmp	.+18     	; 0x152 <__vector_4+0x54>
		{
			if (contador < 15)
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	8f 30       	cpi	r24, 0x0F	; 15
 146:	28 f4       	brcc	.+10     	; 0x152 <__vector_4+0x54>
			{
				contador += 1;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		J1_Apachado = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <J1_Apachado>
 158:	02 c0       	rjmp	.+4      	; 0x15e <__vector_4+0x60>
	}
	else {
		J1_Apachado = 0;
 15a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <J1_Apachado>
	}
}
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_24>:

ISR(TWI_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	uint8_t state = TWSR & 0xFC;
 17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17e:	8c 7f       	andi	r24, 0xFC	; 252
	switch(state){
 180:	80 38       	cpi	r24, 0x80	; 128
 182:	99 f0       	breq	.+38     	; 0x1aa <__vector_24+0x40>
 184:	28 f4       	brcc	.+10     	; 0x190 <__vector_24+0x26>
 186:	80 36       	cpi	r24, 0x60	; 96
 188:	51 f0       	breq	.+20     	; 0x19e <__vector_24+0x34>
 18a:	80 37       	cpi	r24, 0x70	; 112
 18c:	41 f0       	breq	.+16     	; 0x19e <__vector_24+0x34>
 18e:	1f c0       	rjmp	.+62     	; 0x1ce <__vector_24+0x64>
 190:	88 3a       	cpi	r24, 0xA8	; 168
 192:	a9 f0       	breq	.+42     	; 0x1be <__vector_24+0x54>
 194:	88 3b       	cpi	r24, 0xB8	; 184
 196:	99 f0       	breq	.+38     	; 0x1be <__vector_24+0x54>
 198:	80 39       	cpi	r24, 0x90	; 144
 19a:	c9 f4       	brne	.+50     	; 0x1ce <__vector_24+0x64>
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |= (1<<TWINT);
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	80 83       	st	Z, r24
		break;
 1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <__vector_24+0x6e>
		case 0x80:
		case 0x90:
		buffer = TWDR;
 1aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		TWCR |= (1<<TWINT); // Se limpia la bandera
 1b2:	ec eb       	ldi	r30, 0xBC	; 188
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	80 83       	st	Z, r24
		break;
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
		TWDR = contador; // Cargar el dato
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Inicia el envio
 1c6:	85 ec       	ldi	r24, 0xC5	; 197
 1c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <__vector_24+0x6e>
		default:
		TWCR |= (1<<TWINT)|(1<<TWSTO);
 1ce:	ec eb       	ldi	r30, 0xBC	; 188
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 69       	ori	r24, 0x90	; 144
 1d6:	80 83       	st	Z, r24
	}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	8f 91       	pop	r24
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
