
d2_lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000602  00000696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080010e  0080010e  000006a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115f  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000979  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088f  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000645  00000000  00000000  000031a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000037ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 98 01 	call	0x330	; 0x330 <main>
  9e:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
 *
 * Created: 2/13/2025 7:11:39 PM
 *  Author: njfg0
 */ 
#include "I2C.h"
void I2C_Master_Init(unsigned long SCL_Clock, uint8_t Prescaler){
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	8b 01       	movw	r16, r22
  ae:	9c 01       	movw	r18, r24
  b0:	c4 2f       	mov	r28, r20
	DDRC&=~((1<<DDC4)|(1<<DDC5));
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	87 b9       	out	0x07, r24	; 7
	
	switch(Prescaler){
  b8:	44 30       	cpi	r20, 0x04	; 4
  ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
  c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
  c4:	40 31       	cpi	r20, 0x10	; 16
  c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
  c8:	40 34       	cpi	r20, 0x40	; 64
  ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
  cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
		case 1:
			TWSR&=~((1<<TWPS1)|(1<<TWPS0));
  ce:	e9 eb       	ldi	r30, 0xB9	; 185
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	80 83       	st	Z, r24
		break;
  d8:	1e c0       	rjmp	.+60     	; 0x116 <I2C_Master_Init+0x70>
		case 4:
			TWSR&=~(1<<TWPS1);
  da:	e9 eb       	ldi	r30, 0xB9	; 185
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	80 83       	st	Z, r24
			TWSR|=(1<<TWPS0);
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
		break;
  ea:	15 c0       	rjmp	.+42     	; 0x116 <I2C_Master_Init+0x70>
		case 16:
			TWSR&=~(1<<TWPS0);
  ec:	e9 eb       	ldi	r30, 0xB9	; 185
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
			TWSR|=(1<<TWPS1);
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
		break;
  fc:	0c c0       	rjmp	.+24     	; 0x116 <I2C_Master_Init+0x70>
		case 64:
			TWSR|=((1<<TWPS1)|(1<<TWPS0));
  fe:	e9 eb       	ldi	r30, 0xB9	; 185
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	83 60       	ori	r24, 0x03	; 3
 106:	80 83       	st	Z, r24
		break;
 108:	06 c0       	rjmp	.+12     	; 0x116 <I2C_Master_Init+0x70>
		default:
			TWSR&=~((1<<TWPS1)|(1<<TWPS0));
 10a:	e9 eb       	ldi	r30, 0xB9	; 185
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	80 83       	st	Z, r24
			Prescaler=1;
 114:	c1 e0       	ldi	r28, 0x01	; 1
		break;
	}
	TWBR=((F_CPU/SCL_Clock)-16)/(2*Prescaler);//velocidad que queremos
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	74 e2       	ldi	r23, 0x24	; 36
 11a:	84 ef       	ldi	r24, 0xF4	; 244
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	a9 01       	movw	r20, r18
 120:	98 01       	movw	r18, r16
 122:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodsi4>
 126:	ca 01       	movw	r24, r20
 128:	b9 01       	movw	r22, r18
 12a:	60 51       	subi	r22, 0x10	; 16
 12c:	71 09       	sbc	r23, r1
 12e:	81 09       	sbc	r24, r1
 130:	91 09       	sbc	r25, r1
 132:	4c 2f       	mov	r20, r28
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	9a 01       	movw	r18, r20
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	03 2e       	mov	r0, r19
 13e:	00 0c       	add	r0, r0
 140:	44 0b       	sbc	r20, r20
 142:	55 0b       	sbc	r21, r21
 144:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodsi4>
 148:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR|=(1<<TWEN);//Habilitamos comunicacion
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	84 60       	ori	r24, 0x04	; 4
 154:	80 83       	st	Z, r24
}
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <I2C_Master_Start>:

void I2C_Master_Start(void){
	//uint8_t estado;
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 15e:	84 ea       	ldi	r24, 0xA4	; 164
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR &(1<<TWINT))); //espera a que termine la bandera 
 164:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 168:	88 23       	and	r24, r24
 16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_Master_Start+0x6>
	
}
 16c:	08 95       	ret

0000016e <I2C_Master_Stop>:

void I2C_Master_Stop(void){
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 16e:	84 e9       	ldi	r24, 0x94	; 148
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	08 95       	ret

00000176 <I2C_Master_Write>:

uint8_t I2C_Master_Write(uint8_t dato){
	
	uint8_t estado;
	
	TWDR=dato; //carga texto
 176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=(1<<TWEN)|(1<<TWINT);//inicia el envio
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR &(1<<TWINT)));
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <I2C_Master_Write+0xa>
	PORTB&=~(1<<PORTB4);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	8f 7e       	andi	r24, 0xEF	; 239
 18c:	85 b9       	out	0x05, r24	; 5
	estado=TWSR&0xF8;//verifica estado
 18e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 192:	88 7f       	andi	r24, 0xF8	; 248
	if(estado==0x18||estado==0x28||estado==0x40){
 194:	88 31       	cpi	r24, 0x18	; 24
 196:	31 f0       	breq	.+12     	; 0x1a4 <I2C_Master_Write+0x2e>
 198:	88 32       	cpi	r24, 0x28	; 40
 19a:	31 f0       	breq	.+12     	; 0x1a8 <I2C_Master_Write+0x32>
 19c:	80 34       	cpi	r24, 0x40	; 64
 19e:	29 f4       	brne	.+10     	; 0x1aa <I2C_Master_Write+0x34>
		return 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
 1a8:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return estado;
	}
	
	
}
 1aa:	08 95       	ret

000001ac <port_disp>:
	//E=0;
	PORTD&=~(1<<PORTD3);
}

void port_disp(char a){
	if (a&1)
 1ac:	80 ff       	sbrs	r24, 0
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <port_disp+0xc>
	PORTD|=(1<<PORTD4);
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	90 61       	ori	r25, 0x10	; 16
 1b4:	9b b9       	out	0x0b, r25	; 11
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <port_disp+0x12>
	else
	PORTD&=~(1<<PORTD4);
 1b8:	9b b1       	in	r25, 0x0b	; 11
 1ba:	9f 7e       	andi	r25, 0xEF	; 239
 1bc:	9b b9       	out	0x0b, r25	; 11
	
	if (a&2)
 1be:	81 ff       	sbrs	r24, 1
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <port_disp+0x1e>
	PORTD|=(1<<PORTD5);
 1c2:	9b b1       	in	r25, 0x0b	; 11
 1c4:	90 62       	ori	r25, 0x20	; 32
 1c6:	9b b9       	out	0x0b, r25	; 11
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <port_disp+0x24>
	else
	PORTD&=~(1<<PORTD5);
 1ca:	9b b1       	in	r25, 0x0b	; 11
 1cc:	9f 7d       	andi	r25, 0xDF	; 223
 1ce:	9b b9       	out	0x0b, r25	; 11
	
	if (a&4)
 1d0:	82 ff       	sbrs	r24, 2
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <port_disp+0x30>
	PORTD|=(1<<PORTD6);
 1d4:	9b b1       	in	r25, 0x0b	; 11
 1d6:	90 64       	ori	r25, 0x40	; 64
 1d8:	9b b9       	out	0x0b, r25	; 11
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <port_disp+0x36>
	else
	PORTD&=~(1<<PORTD6);
 1dc:	9b b1       	in	r25, 0x0b	; 11
 1de:	9f 7b       	andi	r25, 0xBF	; 191
 1e0:	9b b9       	out	0x0b, r25	; 11
	
	if (a&8)
 1e2:	83 ff       	sbrs	r24, 3
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <port_disp+0x42>
	PORTD|=(1<<PORTD7);
 1e6:	9b b1       	in	r25, 0x0b	; 11
 1e8:	90 68       	ori	r25, 0x80	; 128
 1ea:	9b b9       	out	0x0b, r25	; 11
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <port_disp+0x48>
	else
	PORTD&=~(1<<PORTD7);
 1ee:	9b b1       	in	r25, 0x0b	; 11
 1f0:	9f 77       	andi	r25, 0x7F	; 127
 1f2:	9b b9       	out	0x0b, r25	; 11
	
	if (a&16)
 1f4:	84 ff       	sbrs	r24, 4
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <port_disp+0x54>
	PORTB|=(1<<PORTB0);
 1f8:	95 b1       	in	r25, 0x05	; 5
 1fa:	91 60       	ori	r25, 0x01	; 1
 1fc:	95 b9       	out	0x05, r25	; 5
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <port_disp+0x5a>
	else
	PORTB&=~(1<<PORTB0);
 200:	95 b1       	in	r25, 0x05	; 5
 202:	9e 7f       	andi	r25, 0xFE	; 254
 204:	95 b9       	out	0x05, r25	; 5
	
	if (a&32)
 206:	85 ff       	sbrs	r24, 5
 208:	04 c0       	rjmp	.+8      	; 0x212 <port_disp+0x66>
	PORTB|=(1<<PORTB1);
 20a:	95 b1       	in	r25, 0x05	; 5
 20c:	92 60       	ori	r25, 0x02	; 2
 20e:	95 b9       	out	0x05, r25	; 5
 210:	03 c0       	rjmp	.+6      	; 0x218 <port_disp+0x6c>
	else
	PORTB&=~(1<<PORTB1);
 212:	95 b1       	in	r25, 0x05	; 5
 214:	9d 7f       	andi	r25, 0xFD	; 253
 216:	95 b9       	out	0x05, r25	; 5
	
	if (a&64)
 218:	86 ff       	sbrs	r24, 6
 21a:	04 c0       	rjmp	.+8      	; 0x224 <port_disp+0x78>
	PORTB|=(1<<PORTB2);
 21c:	95 b1       	in	r25, 0x05	; 5
 21e:	94 60       	ori	r25, 0x04	; 4
 220:	95 b9       	out	0x05, r25	; 5
 222:	03 c0       	rjmp	.+6      	; 0x22a <port_disp+0x7e>
	else
	PORTB&=~(1<<PORTB2);
 224:	95 b1       	in	r25, 0x05	; 5
 226:	9b 7f       	andi	r25, 0xFB	; 251
 228:	95 b9       	out	0x05, r25	; 5
	
	if (a&128)
 22a:	88 23       	and	r24, r24
 22c:	24 f4       	brge	.+8      	; 0x236 <port_disp+0x8a>
	PORTB|=(1<<PORTB3);
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	88 60       	ori	r24, 0x08	; 8
 232:	85 b9       	out	0x05, r24	; 5
 234:	08 95       	ret
	else
	PORTB&=~(1<<PORTB3);
 236:	85 b1       	in	r24, 0x05	; 5
 238:	87 7f       	andi	r24, 0xF7	; 247
 23a:	85 b9       	out	0x05, r24	; 5
 23c:	08 95       	ret

0000023e <comandos_LCD>:
	comandos_LCD(0b0001);	
}

void comandos_LCD(char a){
	//RS=0;
	PORTD&=~(1<<PORTD2);
 23e:	9b b1       	in	r25, 0x0b	; 11
 240:	9b 7f       	andi	r25, 0xFB	; 251
 242:	9b b9       	out	0x0b, r25	; 11
	port_disp(a);
 244:	0e 94 d6 00 	call	0x1ac	; 0x1ac <port_disp>
	//enable=1;
	PORTD|=(1<<PORTD3);
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	8f e7       	ldi	r24, 0x7F	; 127
 250:	9e e3       	ldi	r25, 0x3E	; 62
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <comandos_LCD+0x14>
 256:	00 c0       	rjmp	.+0      	; 0x258 <comandos_LCD+0x1a>
 258:	00 00       	nop
	_delay_ms(4);
	//E=0;
	PORTD&=~(1<<PORTD3);
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	87 7f       	andi	r24, 0xF7	; 247
 25e:	8b b9       	out	0x0b, r24	; 11
 260:	08 95       	ret

00000262 <initLCD8b>:
 * Created: 1/30/2025 6:05:55 PM
 *  Author: njfg0
 */ 
#include "lcd.h"
void initLCD8b(void){
	DDRD|=(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(1<<DDD2);
 262:	8a b1       	in	r24, 0x0a	; 10
 264:	8c 6f       	ori	r24, 0xFC	; 252
 266:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);
 268:	84 b1       	in	r24, 0x04	; 4
 26a:	8f 60       	ori	r24, 0x0F	; 15
 26c:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
 26e:	15 b8       	out	0x05, r1	; 5
	PORTD=0;
 270:	1b b8       	out	0x0b, r1	; 11
	
	port_disp(0x00);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 d6 00 	call	0x1ac	; 0x1ac <port_disp>
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	89 ef       	ldi	r24, 0xF9	; 249
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <initLCD8b+0x1c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <initLCD8b+0x26>
 288:	00 00       	nop
	_delay_ms(20);
	
	//function set
	comandos_LCD(0b00111000);
 28a:	88 e3       	ldi	r24, 0x38	; 56
 28c:	0e 94 1f 01 	call	0x23e	; 0x23e <comandos_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	8f e8       	ldi	r24, 0x8F	; 143
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <initLCD8b+0x32>
 298:	00 c0       	rjmp	.+0      	; 0x29a <initLCD8b+0x38>
 29a:	00 00       	nop
	_delay_us(100);
	
	//display on/off
	comandos_LCD(0b1100);
 29c:	8c e0       	ldi	r24, 0x0C	; 12
 29e:	0e 94 1f 01 	call	0x23e	; 0x23e <comandos_LCD>
 2a2:	8f e8       	ldi	r24, 0x8F	; 143
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <initLCD8b+0x44>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <initLCD8b+0x4a>
 2ac:	00 00       	nop
	_delay_us(100);
	
	//Entry mode
	comandos_LCD(0b0110);
 2ae:	86 e0       	ldi	r24, 0x06	; 6
 2b0:	0e 94 1f 01 	call	0x23e	; 0x23e <comandos_LCD>
 2b4:	8f e8       	ldi	r24, 0x8F	; 143
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <initLCD8b+0x56>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <initLCD8b+0x5c>
 2be:	00 00       	nop
	_delay_us(100);
	
	//clear display
	comandos_LCD(0b0001);	
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 1f 01 	call	0x23e	; 0x23e <comandos_LCD>
 2c6:	08 95       	ret

000002c8 <LCD_write_char>:
}

void LCD_write_char(char d){
	//manda y escribe el mensaje
	//RS=1
	PORTD|=(1<<PORTD2);
 2c8:	9b b1       	in	r25, 0x0b	; 11
 2ca:	94 60       	ori	r25, 0x04	; 4
 2cc:	9b b9       	out	0x0b, r25	; 11
	port_disp(d);
 2ce:	0e 94 d6 00 	call	0x1ac	; 0x1ac <port_disp>
	//E=1
	PORTD|=(1<<PORTD3);
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	88 60       	ori	r24, 0x08	; 8
 2d6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	8f e7       	ldi	r24, 0x7F	; 127
 2da:	9e e3       	ldi	r25, 0x3E	; 62
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_write_char+0x14>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_write_char+0x1a>
 2e2:	00 00       	nop
	_delay_ms(4);
	//E=0
	PORTD&=~(1<<PORTD3);
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	87 7f       	andi	r24, 0xF7	; 247
 2e8:	8b b9       	out	0x0b, r24	; 11
 2ea:	08 95       	ret

000002ec <LCD_write_String>:
	
}

void LCD_write_String(char *a){
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	8c 01       	movw	r16, r24
	int i;
	for (i=0;a[i]!='\0';i++)
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <LCD_write_String+0x16>
	LCD_write_char(a[i]);
 2fc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_write_char>
	
}

void LCD_write_String(char *a){
	int i;
	for (i=0;a[i]!='\0';i++)
 300:	21 96       	adiw	r28, 0x01	; 1
 302:	f8 01       	movw	r30, r16
 304:	ec 0f       	add	r30, r28
 306:	fd 1f       	adc	r31, r29
 308:	80 81       	ld	r24, Z
 30a:	81 11       	cpse	r24, r1
 30c:	f7 cf       	rjmp	.-18     	; 0x2fc <LCD_write_String+0x10>
	LCD_write_char(a[i]);
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <LCD_Set_Cursor>:

	
	
void LCD_Set_Cursor(char c, char f){
	char temp;
	if (f==1){
 318:	61 30       	cpi	r22, 0x01	; 1
 31a:	21 f4       	brne	.+8      	; 0x324 <LCD_Set_Cursor+0xc>
		temp=0x80+c;
		comandos_LCD(temp);
 31c:	80 58       	subi	r24, 0x80	; 128
 31e:	0e 94 1f 01 	call	0x23e	; 0x23e <comandos_LCD>
 322:	08 95       	ret
	}else if(f==2){
 324:	62 30       	cpi	r22, 0x02	; 2
 326:	19 f4       	brne	.+6      	; 0x32e <LCD_Set_Cursor+0x16>
		temp=0xC0+c;
		comandos_LCD(temp);
 328:	80 54       	subi	r24, 0x40	; 64
 32a:	0e 94 1f 01 	call	0x23e	; 0x23e <comandos_LCD>
 32e:	08 95       	ret

00000330 <main>:

//void initPorts(void);


int main(void)
{	
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	2f 97       	sbiw	r28, 0x0f	; 15
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
	cli();
 344:	f8 94       	cli
	I2C_Master_Init(100000,1); //iniciar como master frec 100KHz, preescaler 1
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	60 ea       	ldi	r22, 0xA0	; 160
 34a:	76 e8       	ldi	r23, 0x86	; 134
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	initLCD8b();
 354:	0e 94 31 01 	call	0x262	; 0x262 <initLCD8b>
	DDRB|=(1<<DDB4);
 358:	84 b1       	in	r24, 0x04	; 4
 35a:	80 61       	ori	r24, 0x10	; 16
 35c:	84 b9       	out	0x04, r24	; 4
	sei();
 35e:	78 94       	sei
	
	LCD_Set_Cursor(1,1);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Set_Cursor>
	LCD_write_String("S1:");
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_write_String>
	LCD_Set_Cursor(8,1);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	88 e0       	ldi	r24, 0x08	; 8
 374:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Set_Cursor>
	LCD_write_String("S2:");
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_write_String>
	
	//initPorts();
    /* Replace with your application code */
    while (1) 
    {	
		PORTB|=(1<<PORTB4);
 380:	85 b1       	in	r24, 0x05	; 5
 382:	80 61       	ori	r24, 0x10	; 16
 384:	85 b9       	out	0x05, r24	; 5
		//le habla al slave del potenciometro
		I2C_Master_Start();
 386:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
		bufferI2C=slave1<<1|0b00000001;
 38a:	81 e2       	ldi	r24, 0x21	; 33
 38c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bufferI2C>
		temp=I2C_Master_Write(bufferI2C);
 390:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
 394:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <temp>
		if (temp!=1){
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	31 f0       	breq	.+12     	; 0x3a8 <main+0x78>
			I2C_Master_Stop();
 39c:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
			PORTB&=~(1<<PORTB4);
 3a0:	85 b1       	in	r24, 0x05	; 5
 3a2:	8f 7e       	andi	r24, 0xEF	; 239
 3a4:	85 b9       	out	0x05, r24	; 5
 3a6:	10 c0       	rjmp	.+32     	; 0x3c8 <main+0x98>
		}else{
		
			TWCR=(1<<TWINT)|(1<<TWEN);
 3a8:	84 e8       	ldi	r24, 0x84	; 132
 3aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while(!(TWCR&(1<<TWINT)));
 3ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3b2:	88 23       	and	r24, r24
 3b4:	e4 f7       	brge	.-8      	; 0x3ae <main+0x7e>
			valorpot=TWDR;
 3b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3ba:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <valorpot>
			I2C_Master_Stop();
 3be:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
			//_delay_ms(500);
			PORTB&=~(1<<PORTB4);
 3c2:	85 b1       	in	r24, 0x05	; 5
 3c4:	8f 7e       	andi	r24, 0xEF	; 239
 3c6:	85 b9       	out	0x05, r24	; 5
		}
		//_delay_ms(500);
		
		
		//le habla al slave del contador de leds
		I2C_Master_Start();
 3c8:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
		bufferI2C=slave2<<1|0b00000001;
 3cc:	81 e4       	ldi	r24, 0x41	; 65
 3ce:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bufferI2C>
		temp=I2C_Master_Write(bufferI2C);
 3d2:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
 3d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <temp>
		if (temp!=1){
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	19 f0       	breq	.+6      	; 0x3e4 <main+0xb4>
			I2C_Master_Stop();
 3de:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <main+0xce>
		} else {
		
			TWCR=(1<<TWINT)|(1<<TWEN);
 3e4:	84 e8       	ldi	r24, 0x84	; 132
 3e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while(!(TWCR&(1<<TWINT)));
 3ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3ee:	88 23       	and	r24, r24
 3f0:	e4 f7       	brge	.-8      	; 0x3ea <main+0xba>
			valorcont=TWDR;
 3f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3f6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			I2C_Master_Stop();
 3fa:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
		}
		
		
		LCD_Set_Cursor(0,2);
 3fe:	62 e0       	ldi	r22, 0x02	; 2
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Set_Cursor>
		char salida[15];
		strcpy(salida, " ");
 406:	80 e2       	ldi	r24, 0x20	; 32
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	9a 83       	std	Y+2, r25	; 0x02
 40c:	89 83       	std	Y+1, r24	; 0x01
		if (valorpot<10) {
 40e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <valorpot>
 412:	8a 30       	cpi	r24, 0x0A	; 10
 414:	e0 f4       	brcc	.+56     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 416:	4a e0       	ldi	r20, 0x0A	; 10
 418:	67 e1       	ldi	r22, 0x17	; 23
 41a:	71 e0       	ldi	r23, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 ca 02 	call	0x594	; 0x594 <__itoa_ncheck>
			valorpot_t=itoa(valorpot, cadena1_u, 10);
 422:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <valorpot_t+0x1>
 426:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <valorpot_t>
			strcat(salida, valorpot_t);
 42a:	bc 01       	movw	r22, r24
 42c:	8e 01       	movw	r16, r28
 42e:	0f 5f       	subi	r16, 0xFF	; 255
 430:	1f 4f       	sbci	r17, 0xFF	; 255
 432:	c8 01       	movw	r24, r16
 434:	0e 94 bf 02 	call	0x57e	; 0x57e <strcat>
			strcat(salida, "  ");
 438:	f8 01       	movw	r30, r16
 43a:	01 90       	ld	r0, Z+
 43c:	00 20       	and	r0, r0
 43e:	e9 f7       	brne	.-6      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	80 e2       	ldi	r24, 0x20	; 32
 444:	90 e2       	ldi	r25, 0x20	; 32
 446:	91 83       	std	Z+1, r25	; 0x01
 448:	80 83       	st	Z, r24
 44a:	12 82       	std	Z+2, r1	; 0x02
 44c:	2c c0       	rjmp	.+88     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			} else if (valorpot<100){
 44e:	84 36       	cpi	r24, 0x64	; 100
 450:	d8 f4       	brcc	.+54     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 452:	4a e0       	ldi	r20, 0x0A	; 10
 454:	6c e1       	ldi	r22, 0x1C	; 28
 456:	71 e0       	ldi	r23, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 ca 02 	call	0x594	; 0x594 <__itoa_ncheck>
			valorpot_t = itoa(valorpot, cadena1_c, 10);
 45e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <valorpot_t+0x1>
 462:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <valorpot_t>
			strcat(salida, valorpot_t);
 466:	bc 01       	movw	r22, r24
 468:	8e 01       	movw	r16, r28
 46a:	0f 5f       	subi	r16, 0xFF	; 255
 46c:	1f 4f       	sbci	r17, 0xFF	; 255
 46e:	c8 01       	movw	r24, r16
 470:	0e 94 bf 02 	call	0x57e	; 0x57e <strcat>
			strcat(salida, " ");
 474:	f8 01       	movw	r30, r16
 476:	01 90       	ld	r0, Z+
 478:	00 20       	and	r0, r0
 47a:	e9 f7       	brne	.-6      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	80 e2       	ldi	r24, 0x20	; 32
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	91 83       	std	Z+1, r25	; 0x01
 484:	80 83       	st	Z, r24
 486:	0f c0       	rjmp	.+30     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 488:	4a e0       	ldi	r20, 0x0A	; 10
 48a:	61 e2       	ldi	r22, 0x21	; 33
 48c:	71 e0       	ldi	r23, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 ca 02 	call	0x594	; 0x594 <__itoa_ncheck>
			} else {
			valorpot_t=itoa(valorpot,cadena1_d,10);
 494:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <valorpot_t+0x1>
 498:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <valorpot_t>
			strcat(salida, valorpot_t);
 49c:	bc 01       	movw	r22, r24
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	0e 94 bf 02 	call	0x57e	; 0x57e <strcat>
		}
		
		strcat(salida, "    ");
 4a6:	de 01       	movw	r26, r28
 4a8:	11 96       	adiw	r26, 0x01	; 1
 4aa:	0d 90       	ld	r0, X+
 4ac:	00 20       	and	r0, r0
 4ae:	e9 f7       	brne	.-6      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4b0:	11 97       	sbiw	r26, 0x01	; 1
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	e8 e0       	ldi	r30, 0x08	; 8
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	01 90       	ld	r0, Z+
 4ba:	0d 92       	st	X+, r0
 4bc:	8a 95       	dec	r24
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		
		//valorcont_t=itoa(valorcont,cadena2,10);
		if (valorcont<10){
 4c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 4c4:	8a 30       	cpi	r24, 0x0A	; 10
 4c6:	d8 f4       	brcc	.+54     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4c8:	4a e0       	ldi	r20, 0x0A	; 10
 4ca:	66 e2       	ldi	r22, 0x26	; 38
 4cc:	71 e0       	ldi	r23, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 ca 02 	call	0x594	; 0x594 <__itoa_ncheck>
			valorcont_t=itoa(valorcont, cadena2_u, 10);
 4d4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <valorcont_t+0x1>
 4d8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <valorcont_t>
			strcat(salida, valorcont_t);
 4dc:	bc 01       	movw	r22, r24
 4de:	8e 01       	movw	r16, r28
 4e0:	0f 5f       	subi	r16, 0xFF	; 255
 4e2:	1f 4f       	sbci	r17, 0xFF	; 255
 4e4:	c8 01       	movw	r24, r16
 4e6:	0e 94 bf 02 	call	0x57e	; 0x57e <strcat>
			strcat(salida, " ");
 4ea:	f8 01       	movw	r30, r16
 4ec:	01 90       	ld	r0, Z+
 4ee:	00 20       	and	r0, r0
 4f0:	e9 f7       	brne	.-6      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	80 e2       	ldi	r24, 0x20	; 32
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	91 83       	std	Z+1, r25	; 0x01
 4fa:	80 83       	st	Z, r24
 4fc:	0f c0       	rjmp	.+30     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 4fe:	4a e0       	ldi	r20, 0x0A	; 10
 500:	6b e2       	ldi	r22, 0x2B	; 43
 502:	71 e0       	ldi	r23, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 ca 02 	call	0x594	; 0x594 <__itoa_ncheck>
		} else {
			valorcont_t=itoa(valorcont, cadena2_d, 10);
 50a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <valorcont_t+0x1>
 50e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <valorcont_t>
			strcat(salida, valorcont_t);
 512:	bc 01       	movw	r22, r24
 514:	ce 01       	movw	r24, r28
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	0e 94 bf 02 	call	0x57e	; 0x57e <strcat>
		}
		
		LCD_write_String(salida);
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_write_String>
		cadena1_u[0] = '\0';
 524:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cadena1_u>
		cadena1_d[0] = '\0';
 528:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cadena1_d>
		cadena1_c[0] = '\0';
 52c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cadena1_c>
		cadena2_d[0] = '\0';
 530:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <cadena2_d>
		cadena2_u[0] = '\0';
 534:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <cadena2_u>
		
		//valorpot_t[0]='\0';
		//LCD_Set_Cursor(8,2);
		//LCD_write_String(valorcont_t);
    }
 538:	23 cf       	rjmp	.-442    	; 0x380 <main+0x50>

0000053a <__udivmodsi4>:
 53a:	a1 e2       	ldi	r26, 0x21	; 33
 53c:	1a 2e       	mov	r1, r26
 53e:	aa 1b       	sub	r26, r26
 540:	bb 1b       	sub	r27, r27
 542:	fd 01       	movw	r30, r26
 544:	0d c0       	rjmp	.+26     	; 0x560 <__udivmodsi4_ep>

00000546 <__udivmodsi4_loop>:
 546:	aa 1f       	adc	r26, r26
 548:	bb 1f       	adc	r27, r27
 54a:	ee 1f       	adc	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	a2 17       	cp	r26, r18
 550:	b3 07       	cpc	r27, r19
 552:	e4 07       	cpc	r30, r20
 554:	f5 07       	cpc	r31, r21
 556:	20 f0       	brcs	.+8      	; 0x560 <__udivmodsi4_ep>
 558:	a2 1b       	sub	r26, r18
 55a:	b3 0b       	sbc	r27, r19
 55c:	e4 0b       	sbc	r30, r20
 55e:	f5 0b       	sbc	r31, r21

00000560 <__udivmodsi4_ep>:
 560:	66 1f       	adc	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	1a 94       	dec	r1
 56a:	69 f7       	brne	.-38     	; 0x546 <__udivmodsi4_loop>
 56c:	60 95       	com	r22
 56e:	70 95       	com	r23
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	9b 01       	movw	r18, r22
 576:	ac 01       	movw	r20, r24
 578:	bd 01       	movw	r22, r26
 57a:	cf 01       	movw	r24, r30
 57c:	08 95       	ret

0000057e <strcat>:
 57e:	fb 01       	movw	r30, r22
 580:	dc 01       	movw	r26, r24
 582:	0d 90       	ld	r0, X+
 584:	00 20       	and	r0, r0
 586:	e9 f7       	brne	.-6      	; 0x582 <strcat+0x4>
 588:	11 97       	sbiw	r26, 0x01	; 1
 58a:	01 90       	ld	r0, Z+
 58c:	0d 92       	st	X+, r0
 58e:	00 20       	and	r0, r0
 590:	e1 f7       	brne	.-8      	; 0x58a <strcat+0xc>
 592:	08 95       	ret

00000594 <__itoa_ncheck>:
 594:	bb 27       	eor	r27, r27
 596:	4a 30       	cpi	r20, 0x0A	; 10
 598:	31 f4       	brne	.+12     	; 0x5a6 <__itoa_ncheck+0x12>
 59a:	99 23       	and	r25, r25
 59c:	22 f4       	brpl	.+8      	; 0x5a6 <__itoa_ncheck+0x12>
 59e:	bd e2       	ldi	r27, 0x2D	; 45
 5a0:	90 95       	com	r25
 5a2:	81 95       	neg	r24
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__utoa_common>

000005aa <__utoa_ncheck>:
 5aa:	bb 27       	eor	r27, r27

000005ac <__utoa_common>:
 5ac:	fb 01       	movw	r30, r22
 5ae:	55 27       	eor	r21, r21
 5b0:	aa 27       	eor	r26, r26
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	aa 1f       	adc	r26, r26
 5b8:	a4 17       	cp	r26, r20
 5ba:	10 f0       	brcs	.+4      	; 0x5c0 <__utoa_common+0x14>
 5bc:	a4 1b       	sub	r26, r20
 5be:	83 95       	inc	r24
 5c0:	50 51       	subi	r21, 0x10	; 16
 5c2:	b9 f7       	brne	.-18     	; 0x5b2 <__utoa_common+0x6>
 5c4:	a0 5d       	subi	r26, 0xD0	; 208
 5c6:	aa 33       	cpi	r26, 0x3A	; 58
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <__utoa_common+0x20>
 5ca:	a9 5d       	subi	r26, 0xD9	; 217
 5cc:	a1 93       	st	Z+, r26
 5ce:	00 97       	sbiw	r24, 0x00	; 0
 5d0:	79 f7       	brne	.-34     	; 0x5b0 <__utoa_common+0x4>
 5d2:	b1 11       	cpse	r27, r1
 5d4:	b1 93       	st	Z+, r27
 5d6:	11 92       	st	Z+, r1
 5d8:	cb 01       	movw	r24, r22
 5da:	0c 94 ef 02 	jmp	0x5de	; 0x5de <strrev>

000005de <strrev>:
 5de:	dc 01       	movw	r26, r24
 5e0:	fc 01       	movw	r30, r24
 5e2:	67 2f       	mov	r22, r23
 5e4:	71 91       	ld	r23, Z+
 5e6:	77 23       	and	r23, r23
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <strrev+0x4>
 5ea:	32 97       	sbiw	r30, 0x02	; 2
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <strrev+0x18>
 5ee:	7c 91       	ld	r23, X
 5f0:	6d 93       	st	X+, r22
 5f2:	70 83       	st	Z, r23
 5f4:	62 91       	ld	r22, -Z
 5f6:	ae 17       	cp	r26, r30
 5f8:	bf 07       	cpc	r27, r31
 5fa:	c8 f3       	brcs	.-14     	; 0x5ee <strrev+0x10>
 5fc:	08 95       	ret

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
