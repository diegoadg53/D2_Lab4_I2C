
D2_Lab4_S_Pote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f3  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071b  00000000  00000000  00000aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039e  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ae  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000101  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
 */ 

#include "I2C_S.h"

void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //Pines de I2C como entradas
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1; // Se asigna la dirección que tendrá
  96:	88 0f       	add	r24, r24
  98:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE); //Se habilita la interfaz, ACK automático, se Habilita la ISR
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a2:	08 95       	ret

000000a4 <init_ADC>:
    }
}


void init_ADC(void){
	ADMUX = 0;
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
	//Vref = AVCC = 5V
	ADMUX |= (1<<REFS0);
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	// Justificado a la izquierda
	ADMUX |= (1<<ADLAR);
  b0:	80 81       	ld	r24, Z
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	// Habilitar ADC
	ADCSRA |= (1<<ADEN);
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	80 83       	st	Z, r24
	// Máscara de interrupción del ADC
	ADCSRA |= (1<<ADIE);
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	// Prescaler del ADC a 128
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  c8:	80 81       	ld	r24, Z
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	80 83       	st	Z, r24
	
	ADCSRB = 0;
  ce:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	
	// El ADC está configurado para correr en modo Single Conversion
	//Iniciar primera conversión
	ADCSRA |= (1<<ADSC);
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <setup>:
}

void setup(void){
	cli();
  da:	f8 94       	cli
	DDRC = 0;
  dc:	17 b8       	out	0x07, r1	; 7
	I2C_Slave_Init(slave1);
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>
	init_ADC();
  e4:	0e 94 52 00 	call	0xa4	; 0xa4 <init_ADC>
	sei();
  e8:	78 94       	sei
  ea:	08 95       	ret

000000ec <main>:
void setup(void);

int main(void)
{
    /* Replace with your application code */
	setup();
  ec:	0e 94 6d 00 	call	0xda	; 0xda <setup>
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x4>

000000f2 <__vector_21>:
	I2C_Slave_Init(slave1);
	init_ADC();
	sei();
}

ISR(ADC_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	ADCSRA &= ~(1<<ADEN);
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 77       	andi	r24, 0x7F	; 127
 10a:	80 83       	st	Z, r24
	valor_pot0 = ADCH;
 10c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADEN);
 114:	80 81       	ld	r24, Z
 116:	80 68       	ori	r24, 0x80	; 128
 118:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIF);
 120:	80 81       	ld	r24, Z
 122:	80 61       	ori	r24, 0x10	; 16
 124:	80 83       	st	Z, r24
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_24>:

ISR(TWI_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	uint8_t state = TWSR & 0xFC;
 146:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 14a:	8c 7f       	andi	r24, 0xFC	; 252
	switch(state){
 14c:	80 38       	cpi	r24, 0x80	; 128
 14e:	99 f0       	breq	.+38     	; 0x176 <__vector_24+0x40>
 150:	28 f4       	brcc	.+10     	; 0x15c <__vector_24+0x26>
 152:	80 36       	cpi	r24, 0x60	; 96
 154:	51 f0       	breq	.+20     	; 0x16a <__vector_24+0x34>
 156:	80 37       	cpi	r24, 0x70	; 112
 158:	41 f0       	breq	.+16     	; 0x16a <__vector_24+0x34>
 15a:	1f c0       	rjmp	.+62     	; 0x19a <__vector_24+0x64>
 15c:	88 3a       	cpi	r24, 0xA8	; 168
 15e:	a9 f0       	breq	.+42     	; 0x18a <__vector_24+0x54>
 160:	88 3b       	cpi	r24, 0xB8	; 184
 162:	99 f0       	breq	.+38     	; 0x18a <__vector_24+0x54>
 164:	80 39       	cpi	r24, 0x90	; 144
 166:	c9 f4       	brne	.+50     	; 0x19a <__vector_24+0x64>
 168:	06 c0       	rjmp	.+12     	; 0x176 <__vector_24+0x40>
		case 0x60:
		case 0x70:
			TWCR |= (1<<TWINT);
 16a:	ec eb       	ldi	r30, 0xBC	; 188
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 68       	ori	r24, 0x80	; 128
 172:	80 83       	st	Z, r24
			break;
 174:	17 c0       	rjmp	.+46     	; 0x1a4 <__vector_24+0x6e>
		case 0x80:
		case 0x90:
			buffer = TWDR;
 176:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 17a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buffer>
			TWCR |= (1<<TWINT); // Se limpia la bandera
 17e:	ec eb       	ldi	r30, 0xBC	; 188
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 68       	ori	r24, 0x80	; 128
 186:	80 83       	st	Z, r24
			break;
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
			TWDR = valor_pot0; // Cargar el dato
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Inicia el envio
 192:	85 ec       	ldi	r24, 0xC5	; 197
 194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			break;
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <__vector_24+0x6e>
		default:
			TWCR |= (1<<TWINT)|(1<<TWSTO);
 19a:	ec eb       	ldi	r30, 0xBC	; 188
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 69       	ori	r24, 0x90	; 144
 1a2:	80 83       	st	Z, r24
	}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
